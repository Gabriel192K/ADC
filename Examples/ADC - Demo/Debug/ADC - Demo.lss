
ADC - Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000e00  00000e94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000217  00800122  00800122  00000eb6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ee8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000037f5  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ec  00000000  00000000  0000493d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010ef  00000000  00000000  00005c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000714  00000000  00000000  00006d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c4d  00000000  00000000  0000742c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cd3  00000000  00000000  00008079  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00009d4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__dtors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_16>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 37 03 	jmp	0x66e	; 0x66e <__vector_18>
  4c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__vector_19>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  68:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  6c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  70:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  80:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  84:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  8c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  90:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  94:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  98:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  9c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ac:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

000000b4 <__ctors_start>:
  b4:	83 03       	fmuls	r16, r19

000000b6 <__ctors_end>:
  b6:	8a 03       	fmulsu	r16, r18

000000b8 <__dtors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	e0 e0       	ldi	r30, 0x00	; 0
  cc:	fe e0       	ldi	r31, 0x0E	; 14
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x10>
  d0:	05 90       	lpm	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	a2 32       	cpi	r26, 0x22	; 34
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0xc>

000000da <__do_clear_bss>:
  da:	23 e0       	ldi	r18, 0x03	; 3
  dc:	a2 e2       	ldi	r26, 0x22	; 34
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	a9 33       	cpi	r26, 0x39	; 57
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>

000000ea <__do_global_ctors>:
  ea:	10 e0       	ldi	r17, 0x00	; 0
  ec:	cb e5       	ldi	r28, 0x5B	; 91
  ee:	d0 e0       	ldi	r29, 0x00	; 0
  f0:	04 c0       	rjmp	.+8      	; 0xfa <__do_global_ctors+0x10>
  f2:	21 97       	sbiw	r28, 0x01	; 1
  f4:	fe 01       	movw	r30, r28
  f6:	0e 94 ed 06 	call	0xdda	; 0xdda <__tablejump2__>
  fa:	ca 35       	cpi	r28, 0x5A	; 90
  fc:	d1 07       	cpc	r29, r17
  fe:	c9 f7       	brne	.-14     	; 0xf2 <__do_global_ctors+0x8>
 100:	0e 94 36 04 	call	0x86c	; 0x86c <main>
 104:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__do_global_dtors>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <_ZN8__Time__5beginEv>:
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    __asm__ volatile ("" ::: "memory");
 10c:	fc 01       	movw	r30, r24
 10e:	20 81       	ld	r18, Z
 110:	21 11       	cpse	r18, r1
 112:	14 c0       	rjmp	.+40     	; 0x13c <_ZN8__Time__5beginEv+0x30>
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	20 83       	st	Z, r18
 118:	f8 94       	cli
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	88 23       	and	r24, r24
 11e:	69 f0       	breq	.+26     	; 0x13a <_ZN8__Time__5beginEv+0x2e>
 120:	85 b5       	in	r24, 0x25	; 37
 122:	8a 7f       	andi	r24, 0xFA	; 250
 124:	85 bd       	out	0x25, r24	; 37
 126:	85 b5       	in	r24, 0x25	; 37
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	85 bd       	out	0x25, r24	; 37
 12c:	ee e6       	ldi	r30, 0x6E	; 110
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	81 60       	ori	r24, 0x01	; 1
 134:	80 83       	st	Z, r24
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	f1 cf       	rjmp	.-30     	; 0x11c <_ZN8__Time__5beginEv+0x10>
 13a:	78 94       	sei
 13c:	08 95       	ret

0000013e <_ZN8__Time__12microsecondsEv>:
 13e:	fc 01       	movw	r30, r24
 140:	8f b7       	in	r24, 0x3f	; 63
 142:	f8 94       	cli
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	99 23       	and	r25, r25
 148:	31 f0       	breq	.+12     	; 0x156 <_ZN8__Time__12microsecondsEv+0x18>
 14a:	41 81       	ldd	r20, Z+1	; 0x01
 14c:	52 81       	ldd	r21, Z+2	; 0x02
 14e:	63 81       	ldd	r22, Z+3	; 0x03
 150:	74 81       	ldd	r23, Z+4	; 0x04
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	f8 cf       	rjmp	.-16     	; 0x146 <_ZN8__Time__12microsecondsEv+0x8>
 156:	8f bf       	out	0x3f, r24	; 63
 158:	cb 01       	movw	r24, r22
 15a:	ba 01       	movw	r22, r20
 15c:	08 95       	ret

0000015e <_ZN8__Time__12millisecondsEv>:
 15e:	0e 94 9f 00 	call	0x13e	; 0x13e <_ZN8__Time__12microsecondsEv>
 162:	28 ee       	ldi	r18, 0xE8	; 232
 164:	33 e0       	ldi	r19, 0x03	; 3
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	0e 94 bc 06 	call	0xd78	; 0xd78 <__udivmodsi4>
 16e:	ca 01       	movw	r24, r20
 170:	b9 01       	movw	r22, r18
 172:	08 95       	ret

00000174 <_ZN8__Time__7secondsEv>:
 174:	0e 94 af 00 	call	0x15e	; 0x15e <_ZN8__Time__12millisecondsEv>
 178:	28 ee       	ldi	r18, 0xE8	; 232
 17a:	33 e0       	ldi	r19, 0x03	; 3
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	0e 94 bc 06 	call	0xd78	; 0xd78 <__udivmodsi4>
 184:	ca 01       	movw	r24, r20
 186:	b9 01       	movw	r22, r18
 188:	08 95       	ret

0000018a <_ZN8__Time__5delayEm>:
 18a:	8f 92       	push	r8
 18c:	9f 92       	push	r9
 18e:	af 92       	push	r10
 190:	bf 92       	push	r11
 192:	cf 92       	push	r12
 194:	df 92       	push	r13
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	ec 01       	movw	r28, r24
 1a0:	4a 01       	movw	r8, r20
 1a2:	5b 01       	movw	r10, r22
 1a4:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN8__Time__7secondsEv>
 1a8:	6b 01       	movw	r12, r22
 1aa:	7c 01       	movw	r14, r24
 1ac:	ce 01       	movw	r24, r28
 1ae:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN8__Time__7secondsEv>
 1b2:	dc 01       	movw	r26, r24
 1b4:	cb 01       	movw	r24, r22
 1b6:	8c 19       	sub	r24, r12
 1b8:	9d 09       	sbc	r25, r13
 1ba:	ae 09       	sbc	r26, r14
 1bc:	bf 09       	sbc	r27, r15
 1be:	88 15       	cp	r24, r8
 1c0:	99 05       	cpc	r25, r9
 1c2:	aa 05       	cpc	r26, r10
 1c4:	bb 05       	cpc	r27, r11
 1c6:	90 f3       	brcs	.-28     	; 0x1ac <_ZN8__Time__5delayEm+0x22>
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	ff 90       	pop	r15
 1ce:	ef 90       	pop	r14
 1d0:	df 90       	pop	r13
 1d2:	cf 90       	pop	r12
 1d4:	bf 90       	pop	r11
 1d6:	af 90       	pop	r10
 1d8:	9f 90       	pop	r9
 1da:	8f 90       	pop	r8
 1dc:	08 95       	ret

000001de <_ZN8__Time__3irqEv>:
    }
}

void __Time__::irq(void)
{
    this->counter = (this->counter + TIME_INCREMENT_VALUE);
 1de:	fc 01       	movw	r30, r24
 1e0:	41 81       	ldd	r20, Z+1	; 0x01
 1e2:	52 81       	ldd	r21, Z+2	; 0x02
 1e4:	63 81       	ldd	r22, Z+3	; 0x03
 1e6:	74 81       	ldd	r23, Z+4	; 0x04
 1e8:	40 58       	subi	r20, 0x80	; 128
 1ea:	5f 4f       	sbci	r21, 0xFF	; 255
 1ec:	6f 4f       	sbci	r22, 0xFF	; 255
 1ee:	7f 4f       	sbci	r23, 0xFF	; 255
 1f0:	41 83       	std	Z+1, r20	; 0x01
 1f2:	52 83       	std	Z+2, r21	; 0x02
 1f4:	63 83       	std	Z+3, r22	; 0x03
 1f6:	74 83       	std	Z+4, r23	; 0x04
 1f8:	08 95       	ret

000001fa <__vector_16>:
Purpose:  Handling interrupts of Timer COMPA
Input:    Interrupt vector
Return:   None
************************/
ISR(TIMER0_OVF_vect)
{
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
    Time.irq();
 21c:	82 e2       	ldi	r24, 0x22	; 34
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN8__Time__3irqEv>
}
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <_ZN9__USART__C1EPVhS1_S1_S1_S1_S1_>:
    /* Disable <RX>, <RX-IRQ>, <TX> */
    #if defined(__AVR_ATmega328P__) || \
        defined(__AVR_ATmega328PB__) || \
        defined(__AVR_ATmega2560__)
    /* Enable TX interrupt */
    *(this->ucsrb) = *(this->ucsrb)  & ~((1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0));
 246:	cf 92       	push	r12
 248:	df 92       	push	r13
 24a:	ef 92       	push	r14
 24c:	ff 92       	push	r15
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	fc 01       	movw	r30, r24
 254:	72 83       	std	Z+2, r23	; 0x02
 256:	61 83       	std	Z+1, r22	; 0x01
 258:	54 83       	std	Z+4, r21	; 0x04
 25a:	43 83       	std	Z+3, r20	; 0x03
 25c:	36 83       	std	Z+6, r19	; 0x06
 25e:	25 83       	std	Z+5, r18	; 0x05
 260:	10 87       	std	Z+8, r17	; 0x08
 262:	07 83       	std	Z+7, r16	; 0x07
 264:	f2 86       	std	Z+10, r15	; 0x0a
 266:	e1 86       	std	Z+9, r14	; 0x09
 268:	d4 86       	std	Z+12, r13	; 0x0c
 26a:	c3 86       	std	Z+11, r12	; 0x0b
 26c:	1f 91       	pop	r17
 26e:	0f 91       	pop	r16
 270:	ff 90       	pop	r15
 272:	ef 90       	pop	r14
 274:	df 90       	pop	r13
 276:	cf 90       	pop	r12
 278:	08 95       	ret

0000027a <_ZN9__USART__D1Ev>:
 27a:	fc 01       	movw	r30, r24
 27c:	12 82       	std	Z+2, r1	; 0x02
 27e:	11 82       	std	Z+1, r1	; 0x01
 280:	14 82       	std	Z+4, r1	; 0x04
 282:	13 82       	std	Z+3, r1	; 0x03
 284:	16 82       	std	Z+6, r1	; 0x06
 286:	15 82       	std	Z+5, r1	; 0x05
 288:	10 86       	std	Z+8, r1	; 0x08
 28a:	17 82       	std	Z+7, r1	; 0x07
 28c:	12 86       	std	Z+10, r1	; 0x0a
 28e:	11 86       	std	Z+9, r1	; 0x09
 290:	14 86       	std	Z+12, r1	; 0x0c
 292:	13 86       	std	Z+11, r1	; 0x0b
 294:	08 95       	ret

00000296 <_ZN9__USART__5beginEm>:
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	fc 01       	movw	r30, r24
 2a0:	20 81       	ld	r18, Z
 2a2:	21 11       	cpse	r18, r1
 2a4:	3c c0       	rjmp	.+120    	; 0x31e <_ZN9__USART__5beginEm+0x88>
 2a6:	ec 01       	movw	r28, r24
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 83       	st	Z, r24
 2ac:	cb 01       	movw	r24, r22
 2ae:	ba 01       	movw	r22, r20
 2b0:	0e 94 74 05 	call	0xae8	; 0xae8 <__floatunsisf>
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	40 e8       	ldi	r20, 0x80	; 128
 2ba:	51 e4       	ldi	r21, 0x41	; 65
 2bc:	0e 94 02 06 	call	0xc04	; 0xc04 <__mulsf3>
 2c0:	9b 01       	movw	r18, r22
 2c2:	ac 01       	movw	r20, r24
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	74 e2       	ldi	r23, 0x24	; 36
 2c8:	84 e7       	ldi	r24, 0x74	; 116
 2ca:	9b e4       	ldi	r25, 0x4B	; 75
 2cc:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__divsf3>
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	40 e8       	ldi	r20, 0x80	; 128
 2d6:	5f e3       	ldi	r21, 0x3F	; 63
 2d8:	0e 94 66 04 	call	0x8cc	; 0x8cc <__subsf3>
 2dc:	0e 94 6f 06 	call	0xcde	; 0xcde <round>
 2e0:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fixunssfsi>
 2e4:	06 2f       	mov	r16, r22
 2e6:	17 2f       	mov	r17, r23
 2e8:	82 e2       	ldi	r24, 0x22	; 34
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 86 00 	call	0x10c	; 0x10c <_ZN8__Time__5beginEv>
 2f0:	f8 94       	cli
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	88 23       	and	r24, r24
 2f6:	91 f0       	breq	.+36     	; 0x31c <_ZN9__USART__5beginEm+0x86>
 2f8:	e9 81       	ldd	r30, Y+1	; 0x01
 2fa:	fa 81       	ldd	r31, Y+2	; 0x02
 2fc:	10 83       	st	Z, r17
 2fe:	eb 81       	ldd	r30, Y+3	; 0x03
 300:	fc 81       	ldd	r31, Y+4	; 0x04
 302:	00 83       	st	Z, r16
 304:	e9 85       	ldd	r30, Y+9	; 0x09
 306:	fa 85       	ldd	r31, Y+10	; 0x0a
 308:	80 81       	ld	r24, Z
 30a:	86 60       	ori	r24, 0x06	; 6
 30c:	80 83       	st	Z, r24
 30e:	ef 81       	ldd	r30, Y+7	; 0x07
 310:	f8 85       	ldd	r31, Y+8	; 0x08
 312:	80 81       	ld	r24, Z
 314:	88 69       	ori	r24, 0x98	; 152
 316:	80 83       	st	Z, r24
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	ec cf       	rjmp	.-40     	; 0x2f4 <_ZN9__USART__5beginEm+0x5e>
 31c:	78 94       	sei
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	08 95       	ret

00000328 <_ZN9__USART__5writeEh>:
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	dc 01       	movw	r26, r24
 32e:	fc 01       	movw	r30, r24
 330:	e1 5f       	subi	r30, 0xF1	; 241
 332:	fd 4f       	sbci	r31, 0xFD	; 253
 334:	80 81       	ld	r24, Z
 336:	8f 5f       	subi	r24, 0xFF	; 255
 338:	fd 01       	movw	r30, r26
 33a:	e0 5f       	subi	r30, 0xF0	; 240
 33c:	fd 4f       	sbci	r31, 0xFD	; 253
 33e:	90 81       	ld	r25, Z
 340:	89 17       	cp	r24, r25
 342:	d1 f3       	breq	.-12     	; 0x338 <_ZN9__USART__5writeEh+0x10>
 344:	ed 01       	movw	r28, r26
 346:	c1 5f       	subi	r28, 0xF1	; 241
 348:	dd 4f       	sbci	r29, 0xFD	; 253
 34a:	98 81       	ld	r25, Y
 34c:	fd 01       	movw	r30, r26
 34e:	e9 0f       	add	r30, r25
 350:	f1 1d       	adc	r31, r1
 352:	e3 5f       	subi	r30, 0xF3	; 243
 354:	fe 4f       	sbci	r31, 0xFE	; 254
 356:	60 83       	st	Z, r22
 358:	88 83       	st	Y, r24
 35a:	17 96       	adiw	r26, 0x07	; 7
 35c:	ed 91       	ld	r30, X+
 35e:	fc 91       	ld	r31, X
 360:	18 97       	sbiw	r26, 0x08	; 8
 362:	80 81       	ld	r24, Z
 364:	80 62       	ori	r24, 0x20	; 32
 366:	80 83       	st	Z, r24
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <_ZN9__USART__5printEc>:
 36e:	0e 94 94 01 	call	0x328	; 0x328 <_ZN9__USART__5writeEh>
 372:	08 95       	ret

00000374 <_ZN9__USART__7printlnEv>:
 374:	6a e0       	ldi	r22, 0x0A	; 10
 376:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN9__USART__5printEc>
 37a:	08 95       	ret

0000037c <_ZN9__USART__5printEPKc>:
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	8c 01       	movw	r16, r24
 386:	eb 01       	movw	r28, r22
 388:	68 81       	ld	r22, Y
 38a:	66 23       	and	r22, r22
 38c:	29 f0       	breq	.+10     	; 0x398 <_ZN9__USART__5printEPKc+0x1c>
 38e:	21 96       	adiw	r28, 0x01	; 1
 390:	c8 01       	movw	r24, r16
 392:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN9__USART__5printEc>
 396:	f8 cf       	rjmp	.-16     	; 0x388 <_ZN9__USART__5printEPKc+0xc>
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	08 95       	ret

000003a2 <_ZN9__USART__5printEj>:
 3a2:	0f 93       	push	r16
 3a4:	1f 93       	push	r17
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	8c 01       	movw	r16, r24
 3ac:	eb 01       	movw	r28, r22
 3ae:	60 31       	cpi	r22, 0x10	; 16
 3b0:	27 e2       	ldi	r18, 0x27	; 39
 3b2:	72 07       	cpc	r23, r18
 3b4:	78 f1       	brcs	.+94     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3b6:	9b 01       	movw	r18, r22
 3b8:	32 95       	swap	r19
 3ba:	22 95       	swap	r18
 3bc:	2f 70       	andi	r18, 0x0F	; 15
 3be:	23 27       	eor	r18, r19
 3c0:	3f 70       	andi	r19, 0x0F	; 15
 3c2:	23 27       	eor	r18, r19
 3c4:	a7 e4       	ldi	r26, 0x47	; 71
 3c6:	b3 e0       	ldi	r27, 0x03	; 3
 3c8:	0e 94 de 06 	call	0xdbc	; 0xdbc <__umulhisi3>
 3cc:	ac 01       	movw	r20, r24
 3ce:	56 95       	lsr	r21
 3d0:	47 95       	ror	r20
 3d2:	56 95       	lsr	r21
 3d4:	47 95       	ror	r20
 3d6:	56 95       	lsr	r21
 3d8:	47 95       	ror	r20
 3da:	9a 01       	movw	r18, r20
 3dc:	ad ec       	ldi	r26, 0xCD	; 205
 3de:	bc ec       	ldi	r27, 0xCC	; 204
 3e0:	0e 94 de 06 	call	0xdbc	; 0xdbc <__umulhisi3>
 3e4:	96 95       	lsr	r25
 3e6:	87 95       	ror	r24
 3e8:	96 95       	lsr	r25
 3ea:	87 95       	ror	r24
 3ec:	96 95       	lsr	r25
 3ee:	87 95       	ror	r24
 3f0:	bc 01       	movw	r22, r24
 3f2:	66 0f       	add	r22, r22
 3f4:	77 1f       	adc	r23, r23
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	86 0f       	add	r24, r22
 404:	97 1f       	adc	r25, r23
 406:	28 1b       	sub	r18, r24
 408:	39 0b       	sbc	r19, r25
 40a:	60 e3       	ldi	r22, 0x30	; 48
 40c:	62 0f       	add	r22, r18
 40e:	c8 01       	movw	r24, r16
 410:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN9__USART__5printEc>
 414:	c8 3e       	cpi	r28, 0xE8	; 232
 416:	33 e0       	ldi	r19, 0x03	; 3
 418:	d3 07       	cpc	r29, r19
 41a:	78 f1       	brcs	.+94     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 41c:	9e 01       	movw	r18, r28
 41e:	36 95       	lsr	r19
 420:	27 95       	ror	r18
 422:	36 95       	lsr	r19
 424:	27 95       	ror	r18
 426:	36 95       	lsr	r19
 428:	27 95       	ror	r18
 42a:	a5 ec       	ldi	r26, 0xC5	; 197
 42c:	b0 e2       	ldi	r27, 0x20	; 32
 42e:	0e 94 de 06 	call	0xdbc	; 0xdbc <__umulhisi3>
 432:	ac 01       	movw	r20, r24
 434:	52 95       	swap	r21
 436:	42 95       	swap	r20
 438:	4f 70       	andi	r20, 0x0F	; 15
 43a:	45 27       	eor	r20, r21
 43c:	5f 70       	andi	r21, 0x0F	; 15
 43e:	45 27       	eor	r20, r21
 440:	9a 01       	movw	r18, r20
 442:	ad ec       	ldi	r26, 0xCD	; 205
 444:	bc ec       	ldi	r27, 0xCC	; 204
 446:	0e 94 de 06 	call	0xdbc	; 0xdbc <__umulhisi3>
 44a:	96 95       	lsr	r25
 44c:	87 95       	ror	r24
 44e:	96 95       	lsr	r25
 450:	87 95       	ror	r24
 452:	96 95       	lsr	r25
 454:	87 95       	ror	r24
 456:	bc 01       	movw	r22, r24
 458:	66 0f       	add	r22, r22
 45a:	77 1f       	adc	r23, r23
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	86 0f       	add	r24, r22
 46a:	97 1f       	adc	r25, r23
 46c:	28 1b       	sub	r18, r24
 46e:	39 0b       	sbc	r19, r25
 470:	60 e3       	ldi	r22, 0x30	; 48
 472:	62 0f       	add	r22, r18
 474:	c8 01       	movw	r24, r16
 476:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN9__USART__5printEc>
 47a:	c4 36       	cpi	r28, 0x64	; 100
 47c:	d1 05       	cpc	r29, r1
 47e:	48 f1       	brcs	.+82     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 480:	9e 01       	movw	r18, r28
 482:	36 95       	lsr	r19
 484:	27 95       	ror	r18
 486:	36 95       	lsr	r19
 488:	27 95       	ror	r18
 48a:	ab e7       	ldi	r26, 0x7B	; 123
 48c:	b4 e1       	ldi	r27, 0x14	; 20
 48e:	0e 94 de 06 	call	0xdbc	; 0xdbc <__umulhisi3>
 492:	ac 01       	movw	r20, r24
 494:	56 95       	lsr	r21
 496:	47 95       	ror	r20
 498:	9a 01       	movw	r18, r20
 49a:	ad ec       	ldi	r26, 0xCD	; 205
 49c:	bc ec       	ldi	r27, 0xCC	; 204
 49e:	0e 94 de 06 	call	0xdbc	; 0xdbc <__umulhisi3>
 4a2:	96 95       	lsr	r25
 4a4:	87 95       	ror	r24
 4a6:	96 95       	lsr	r25
 4a8:	87 95       	ror	r24
 4aa:	96 95       	lsr	r25
 4ac:	87 95       	ror	r24
 4ae:	bc 01       	movw	r22, r24
 4b0:	66 0f       	add	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	86 0f       	add	r24, r22
 4c2:	97 1f       	adc	r25, r23
 4c4:	28 1b       	sub	r18, r24
 4c6:	39 0b       	sbc	r19, r25
 4c8:	60 e3       	ldi	r22, 0x30	; 48
 4ca:	62 0f       	add	r22, r18
 4cc:	c8 01       	movw	r24, r16
 4ce:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN9__USART__5printEc>
 4d2:	ca 30       	cpi	r28, 0x0A	; 10
 4d4:	d1 05       	cpc	r29, r1
 4d6:	38 f1       	brcs	.+78     	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
 4d8:	9e 01       	movw	r18, r28
 4da:	ad ec       	ldi	r26, 0xCD	; 205
 4dc:	bc ec       	ldi	r27, 0xCC	; 204
 4de:	0e 94 de 06 	call	0xdbc	; 0xdbc <__umulhisi3>
 4e2:	ac 01       	movw	r20, r24
 4e4:	56 95       	lsr	r21
 4e6:	47 95       	ror	r20
 4e8:	56 95       	lsr	r21
 4ea:	47 95       	ror	r20
 4ec:	56 95       	lsr	r21
 4ee:	47 95       	ror	r20
 4f0:	9a 01       	movw	r18, r20
 4f2:	0e 94 de 06 	call	0xdbc	; 0xdbc <__umulhisi3>
 4f6:	96 95       	lsr	r25
 4f8:	87 95       	ror	r24
 4fa:	96 95       	lsr	r25
 4fc:	87 95       	ror	r24
 4fe:	96 95       	lsr	r25
 500:	87 95       	ror	r24
 502:	bc 01       	movw	r22, r24
 504:	66 0f       	add	r22, r22
 506:	77 1f       	adc	r23, r23
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	86 0f       	add	r24, r22
 516:	97 1f       	adc	r25, r23
 518:	28 1b       	sub	r18, r24
 51a:	39 0b       	sbc	r19, r25
 51c:	60 e3       	ldi	r22, 0x30	; 48
 51e:	62 0f       	add	r22, r18
 520:	c8 01       	movw	r24, r16
 522:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN9__USART__5printEc>
 526:	9e 01       	movw	r18, r28
 528:	ad ec       	ldi	r26, 0xCD	; 205
 52a:	bc ec       	ldi	r27, 0xCC	; 204
 52c:	0e 94 de 06 	call	0xdbc	; 0xdbc <__umulhisi3>
 530:	96 95       	lsr	r25
 532:	87 95       	ror	r24
 534:	96 95       	lsr	r25
 536:	87 95       	ror	r24
 538:	96 95       	lsr	r25
 53a:	87 95       	ror	r24
 53c:	bc 01       	movw	r22, r24
 53e:	66 0f       	add	r22, r22
 540:	77 1f       	adc	r23, r23
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	86 0f       	add	r24, r22
 550:	97 1f       	adc	r25, r23
 552:	28 1b       	sub	r18, r24
 554:	39 0b       	sbc	r19, r25
 556:	60 e3       	ldi	r22, 0x30	; 48
 558:	62 0f       	add	r22, r18
 55a:	c8 01       	movw	r24, r16
 55c:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN9__USART__5printEc>
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	1f 91       	pop	r17
 566:	0f 91       	pop	r16
 568:	08 95       	ret

0000056a <_ZN9__USART__7printlnEj>:
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	ec 01       	movw	r28, r24
 570:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_ZN9__USART__5printEj>
 574:	ce 01       	movw	r24, r28
 576:	0e 94 ba 01 	call	0x374	; 0x374 <_ZN9__USART__7printlnEv>
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <_ZN9__USART__5rxIRQEv>:
Purpose:  RX interrupt call
Input:    None
Return:   None
***************************************************/
void __USART__::rxIRQ(void)
{
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
    /* Read data into buffer */
    this->rxBuffer[this->rxHead] = *(this->udr);
 584:	fc 01       	movw	r30, r24
 586:	e3 5f       	subi	r30, 0xF3	; 243
 588:	fd 4f       	sbci	r31, 0xFD	; 253
 58a:	30 81       	ld	r19, Z
 58c:	ec 01       	movw	r28, r24
 58e:	ab 85       	ldd	r26, Y+11	; 0x0b
 590:	bc 85       	ldd	r27, Y+12	; 0x0c
 592:	2c 91       	ld	r18, X
 594:	dc 01       	movw	r26, r24
 596:	a3 0f       	add	r26, r19
 598:	b1 1d       	adc	r27, r1
 59a:	1d 96       	adiw	r26, 0x0d	; 13
 59c:	2c 93       	st	X, r18
    /* Increase head */
    this->rxHead = (this->rxHead + 1) & USART_DEFAULT_RX_BUFFER_MASK;
 59e:	80 81       	ld	r24, Z
 5a0:	8f 5f       	subi	r24, 0xFF	; 255
 5a2:	80 83       	st	Z, r24
}
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	08 95       	ret

000005aa <_ZN9__USART__5txIRQEv>:
Purpose:  TX interrupt call
Input:    None
Return:   None
***************************************************/
void __USART__::txIRQ(void)
{
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
    /* If data is available into buffer */
    if (this->txHead != this->txTail)
 5ae:	fc 01       	movw	r30, r24
 5b0:	e1 5f       	subi	r30, 0xF1	; 241
 5b2:	fd 4f       	sbci	r31, 0xFD	; 253
 5b4:	30 81       	ld	r19, Z
 5b6:	31 96       	adiw	r30, 0x01	; 1
 5b8:	20 81       	ld	r18, Z
 5ba:	32 17       	cp	r19, r18
 5bc:	91 f0       	breq	.+36     	; 0x5e2 <_ZN9__USART__5txIRQEv+0x38>
    {
        /* Load data from buffer */
        *(this->udr) = this->txBuffer[this->txTail];
 5be:	dc 01       	movw	r26, r24
 5c0:	1b 96       	adiw	r26, 0x0b	; 11
 5c2:	cd 91       	ld	r28, X+
 5c4:	dc 91       	ld	r29, X
 5c6:	1c 97       	sbiw	r26, 0x0c	; 12
 5c8:	df 01       	movw	r26, r30
 5ca:	20 81       	ld	r18, Z
 5cc:	82 0f       	add	r24, r18
 5ce:	91 1d       	adc	r25, r1
 5d0:	fc 01       	movw	r30, r24
 5d2:	e3 5f       	subi	r30, 0xF3	; 243
 5d4:	fe 4f       	sbci	r31, 0xFE	; 254
 5d6:	80 81       	ld	r24, Z
 5d8:	88 83       	st	Y, r24
        /* Increase tail */
        this->txTail = (this->txTail + 1) & USART_DEFAULT_TX_BUFFER_MASK;
 5da:	8c 91       	ld	r24, X
 5dc:	8f 5f       	subi	r24, 0xFF	; 255
 5de:	8c 93       	st	X, r24
 5e0:	08 c0       	rjmp	.+16     	; 0x5f2 <_ZN9__USART__5txIRQEv+0x48>
    }
    /* Else there's no data into buffer */
    else
        /* Disable TX interrupt */
        *(this->ucsrb) = *(this->ucsrb) & ~(1 << UDRIE0); 
 5e2:	dc 01       	movw	r26, r24
 5e4:	17 96       	adiw	r26, 0x07	; 7
 5e6:	ed 91       	ld	r30, X+
 5e8:	fc 91       	ld	r31, X
 5ea:	18 97       	sbiw	r26, 0x08	; 8
 5ec:	80 81       	ld	r24, Z
 5ee:	8f 7d       	andi	r24, 0xDF	; 223
 5f0:	80 83       	st	Z, r24
}
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	08 95       	ret

000005f8 <_Z41__static_initialization_and_destruction_0ii>:
Return:   None
************************/
ISR(USART0_UDRE_vect)
{
    USART.txIRQ();
}
 5f8:	af 92       	push	r10
 5fa:	bf 92       	push	r11
 5fc:	cf 92       	push	r12
 5fe:	df 92       	push	r13
 600:	ef 92       	push	r14
 602:	ff 92       	push	r15
 604:	0f 93       	push	r16
 606:	1f 93       	push	r17
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	ec 01       	movw	r28, r24
 60e:	5b 01       	movw	r10, r22
 610:	01 97       	sbiw	r24, 0x01	; 1
 612:	c9 f4       	brne	.+50     	; 0x646 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 614:	6f 3f       	cpi	r22, 0xFF	; 255
 616:	7f 4f       	sbci	r23, 0xFF	; 255
 618:	b1 f4       	brne	.+44     	; 0x646 <_Z41__static_initialization_and_destruction_0ii+0x4e>
/* Dependencies */
#include "USART.h"

#if defined(HAS_USART)

__USART__ USART = __USART__(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);
 61a:	0f 2e       	mov	r0, r31
 61c:	f6 ec       	ldi	r31, 0xC6	; 198
 61e:	cf 2e       	mov	r12, r31
 620:	d1 2c       	mov	r13, r1
 622:	f0 2d       	mov	r31, r0
 624:	0f 2e       	mov	r0, r31
 626:	f2 ec       	ldi	r31, 0xC2	; 194
 628:	ef 2e       	mov	r14, r31
 62a:	f1 2c       	mov	r15, r1
 62c:	f0 2d       	mov	r31, r0
 62e:	01 ec       	ldi	r16, 0xC1	; 193
 630:	10 e0       	ldi	r17, 0x00	; 0
 632:	20 ec       	ldi	r18, 0xC0	; 192
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	44 ec       	ldi	r20, 0xC4	; 196
 638:	50 e0       	ldi	r21, 0x00	; 0
 63a:	65 ec       	ldi	r22, 0xC5	; 197
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	87 e2       	ldi	r24, 0x27	; 39
 640:	91 e0       	ldi	r25, 0x01	; 1
 642:	0e 94 23 01 	call	0x246	; 0x246 <_ZN9__USART__C1EPVhS1_S1_S1_S1_S1_>
 646:	cd 2b       	or	r28, r29
 648:	39 f4       	brne	.+14     	; 0x658 <_Z41__static_initialization_and_destruction_0ii+0x60>
 64a:	ab 20       	and	r10, r11
 64c:	a0 94       	com	r10
 64e:	21 f4       	brne	.+8      	; 0x658 <_Z41__static_initialization_and_destruction_0ii+0x60>
 650:	87 e2       	ldi	r24, 0x27	; 39
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	0e 94 3d 01 	call	0x27a	; 0x27a <_ZN9__USART__D1Ev>
Return:   None
************************/
ISR(USART0_UDRE_vect)
{
    USART.txIRQ();
}
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	1f 91       	pop	r17
 65e:	0f 91       	pop	r16
 660:	ff 90       	pop	r15
 662:	ef 90       	pop	r14
 664:	df 90       	pop	r13
 666:	cf 90       	pop	r12
 668:	bf 90       	pop	r11
 66a:	af 90       	pop	r10
 66c:	08 95       	ret

0000066e <__vector_18>:
#if defined(USART_TX_vect)
ISR(USART_RX_vect)
#elif defined(USART0_TX_vect)
ISR(USART0_RX_vect)
#endif
{
 66e:	1f 92       	push	r1
 670:	0f 92       	push	r0
 672:	0f b6       	in	r0, 0x3f	; 63
 674:	0f 92       	push	r0
 676:	11 24       	eor	r1, r1
 678:	2f 93       	push	r18
 67a:	3f 93       	push	r19
 67c:	4f 93       	push	r20
 67e:	5f 93       	push	r21
 680:	6f 93       	push	r22
 682:	7f 93       	push	r23
 684:	8f 93       	push	r24
 686:	9f 93       	push	r25
 688:	af 93       	push	r26
 68a:	bf 93       	push	r27
 68c:	ef 93       	push	r30
 68e:	ff 93       	push	r31
    USART.rxIRQ();
 690:	87 e2       	ldi	r24, 0x27	; 39
 692:	91 e0       	ldi	r25, 0x01	; 1
 694:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN9__USART__5rxIRQEv>
}
 698:	ff 91       	pop	r31
 69a:	ef 91       	pop	r30
 69c:	bf 91       	pop	r27
 69e:	af 91       	pop	r26
 6a0:	9f 91       	pop	r25
 6a2:	8f 91       	pop	r24
 6a4:	7f 91       	pop	r23
 6a6:	6f 91       	pop	r22
 6a8:	5f 91       	pop	r21
 6aa:	4f 91       	pop	r20
 6ac:	3f 91       	pop	r19
 6ae:	2f 91       	pop	r18
 6b0:	0f 90       	pop	r0
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	0f 90       	pop	r0
 6b6:	1f 90       	pop	r1
 6b8:	18 95       	reti

000006ba <__vector_19>:
Purpose:  Handling interrupts of USART TX
Input:    Interrupt vector
Return:   None
************************/
ISR(USART0_UDRE_vect)
{
 6ba:	1f 92       	push	r1
 6bc:	0f 92       	push	r0
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	0f 92       	push	r0
 6c2:	11 24       	eor	r1, r1
 6c4:	2f 93       	push	r18
 6c6:	3f 93       	push	r19
 6c8:	4f 93       	push	r20
 6ca:	5f 93       	push	r21
 6cc:	6f 93       	push	r22
 6ce:	7f 93       	push	r23
 6d0:	8f 93       	push	r24
 6d2:	9f 93       	push	r25
 6d4:	af 93       	push	r26
 6d6:	bf 93       	push	r27
 6d8:	ef 93       	push	r30
 6da:	ff 93       	push	r31
    USART.txIRQ();
 6dc:	87 e2       	ldi	r24, 0x27	; 39
 6de:	91 e0       	ldi	r25, 0x01	; 1
 6e0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN9__USART__5txIRQEv>
}
 6e4:	ff 91       	pop	r31
 6e6:	ef 91       	pop	r30
 6e8:	bf 91       	pop	r27
 6ea:	af 91       	pop	r26
 6ec:	9f 91       	pop	r25
 6ee:	8f 91       	pop	r24
 6f0:	7f 91       	pop	r23
 6f2:	6f 91       	pop	r22
 6f4:	5f 91       	pop	r21
 6f6:	4f 91       	pop	r20
 6f8:	3f 91       	pop	r19
 6fa:	2f 91       	pop	r18
 6fc:	0f 90       	pop	r0
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	0f 90       	pop	r0
 702:	1f 90       	pop	r1
 704:	18 95       	reti

00000706 <_GLOBAL__sub_I_USART>:
 706:	6f ef       	ldi	r22, 0xFF	; 255
 708:	7f ef       	ldi	r23, 0xFF	; 255
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_Z41__static_initialization_and_destruction_0ii>
 712:	08 95       	ret

00000714 <_GLOBAL__sub_D_USART>:
 714:	6f ef       	ldi	r22, 0xFF	; 255
 716:	7f ef       	ldi	r23, 0xFF	; 255
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_Z41__static_initialization_and_destruction_0ii>
 720:	08 95       	ret

00000722 <_ZN7__ADC__12setPrescalerEh>:
*********************************************/
void __ADC__::setPrescaler(uint8_t prescaler)
{
    #if defined (__AVR_ATmega328P__) || \
        defined (__AVR_ATmega328PB__)
    ADCSRA &= ~((1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0)); /* Clear all prescaler bits */
 722:	ea e7       	ldi	r30, 0x7A	; 122
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
 728:	88 7f       	andi	r24, 0xF8	; 248
 72a:	80 83       	st	Z, r24
    switch (prescaler)
 72c:	60 31       	cpi	r22, 0x10	; 16
 72e:	09 f1       	breq	.+66     	; 0x772 <_ZN7__ADC__12setPrescalerEh+0x50>
 730:	38 f4       	brcc	.+14     	; 0x740 <_ZN7__ADC__12setPrescalerEh+0x1e>
 732:	64 30       	cpi	r22, 0x04	; 4
 734:	91 f0       	breq	.+36     	; 0x75a <_ZN7__ADC__12setPrescalerEh+0x38>
 736:	68 30       	cpi	r22, 0x08	; 8
 738:	b1 f0       	breq	.+44     	; 0x766 <_ZN7__ADC__12setPrescalerEh+0x44>
 73a:	62 30       	cpi	r22, 0x02	; 2
 73c:	89 f5       	brne	.+98     	; 0x7a0 <_ZN7__ADC__12setPrescalerEh+0x7e>
 73e:	07 c0       	rjmp	.+14     	; 0x74e <_ZN7__ADC__12setPrescalerEh+0x2c>
 740:	60 34       	cpi	r22, 0x40	; 64
 742:	19 f1       	breq	.+70     	; 0x78a <_ZN7__ADC__12setPrescalerEh+0x68>
 744:	60 38       	cpi	r22, 0x80	; 128
 746:	39 f1       	breq	.+78     	; 0x796 <_ZN7__ADC__12setPrescalerEh+0x74>
 748:	60 32       	cpi	r22, 0x20	; 32
 74a:	51 f5       	brne	.+84     	; 0x7a0 <_ZN7__ADC__12setPrescalerEh+0x7e>
 74c:	18 c0       	rjmp	.+48     	; 0x77e <_ZN7__ADC__12setPrescalerEh+0x5c>
    {
        case 2  : ADCSRA |= (1 << ADPS0);                               break;
 74e:	ea e7       	ldi	r30, 0x7A	; 122
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	81 60       	ori	r24, 0x01	; 1
 756:	80 83       	st	Z, r24
 758:	08 95       	ret
        case 4  : ADCSRA |= (1 << ADPS1);                               break;
 75a:	ea e7       	ldi	r30, 0x7A	; 122
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	80 81       	ld	r24, Z
 760:	82 60       	ori	r24, 0x02	; 2
 762:	80 83       	st	Z, r24
 764:	08 95       	ret
        case 8  : ADCSRA |= (1 << ADPS1) | (1 << ADPS0);                break;
 766:	ea e7       	ldi	r30, 0x7A	; 122
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	80 81       	ld	r24, Z
 76c:	83 60       	ori	r24, 0x03	; 3
 76e:	80 83       	st	Z, r24
 770:	08 95       	ret
        case 16 : ADCSRA |= (1 << ADPS2);                               break;
 772:	ea e7       	ldi	r30, 0x7A	; 122
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	80 81       	ld	r24, Z
 778:	84 60       	ori	r24, 0x04	; 4
 77a:	80 83       	st	Z, r24
 77c:	08 95       	ret
        case 32 : ADCSRA |= (1 << ADPS2) | (1 << ADPS0);                break;
 77e:	ea e7       	ldi	r30, 0x7A	; 122
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	80 81       	ld	r24, Z
 784:	85 60       	ori	r24, 0x05	; 5
 786:	80 83       	st	Z, r24
 788:	08 95       	ret
        case 64 : ADCSRA |= (1 << ADPS2) | (1 << ADPS1);                break;
 78a:	ea e7       	ldi	r30, 0x7A	; 122
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	80 81       	ld	r24, Z
 790:	86 60       	ori	r24, 0x06	; 6
 792:	80 83       	st	Z, r24
 794:	08 95       	ret
        case 128: ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); break;
 796:	ea e7       	ldi	r30, 0x7A	; 122
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	80 81       	ld	r24, Z
 79c:	87 60       	ori	r24, 0x07	; 7
 79e:	80 83       	st	Z, r24
 7a0:	08 95       	ret

000007a2 <_ZN7__ADC__12setReferenceEh>:
*********************************************/
void __ADC__::setReference(uint8_t reference)
{
    #if defined (__AVR_ATmega328P__) || \
        defined (__AVR_ATmega328PB__)
    switch (reference)
 7a2:	61 30       	cpi	r22, 0x01	; 1
 7a4:	51 f0       	breq	.+20     	; 0x7ba <_ZN7__ADC__12setReferenceEh+0x18>
 7a6:	18 f0       	brcs	.+6      	; 0x7ae <_ZN7__ADC__12setReferenceEh+0xc>
 7a8:	62 30       	cpi	r22, 0x02	; 2
 7aa:	71 f0       	breq	.+28     	; 0x7c8 <_ZN7__ADC__12setReferenceEh+0x26>
 7ac:	08 95       	ret
    {
        case AREF    : ADMUX &= ~((1 << REFS1) | (1 << REFS0));        break;
 7ae:	ec e7       	ldi	r30, 0x7C	; 124
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	80 81       	ld	r24, Z
 7b4:	8f 73       	andi	r24, 0x3F	; 63
 7b6:	80 83       	st	Z, r24
 7b8:	08 95       	ret
        case AVCC    : ADMUX = (ADMUX & ~(1 << REFS1)) | (1 << REFS0); break;
 7ba:	ec e7       	ldi	r30, 0x7C	; 124
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	80 81       	ld	r24, Z
 7c0:	8f 73       	andi	r24, 0x3F	; 63
 7c2:	80 64       	ori	r24, 0x40	; 64
 7c4:	80 83       	st	Z, r24
 7c6:	08 95       	ret
        case INTERNAL: ADMUX |= (1 << REFS1) | (1 << REFS0);           break;
 7c8:	ec e7       	ldi	r30, 0x7C	; 124
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	80 81       	ld	r24, Z
 7ce:	80 6c       	ori	r24, 0xC0	; 192
 7d0:	80 83       	st	Z, r24
 7d2:	08 95       	ret

000007d4 <_ZN7__ADC__10setSamplesEh>:
Input:    Sample rate
Return:   None
*********************************************/
void __ADC__::setSamples(uint8_t samples)
{
    this->samples = samples;
 7d4:	fc 01       	movw	r30, r24
 7d6:	60 83       	st	Z, r22
 7d8:	08 95       	ret

000007da <_ZN7__ADC__5beginEv>:
Purpose:  Start ADC module
Input:    None
Return:   None
*********************************************/
void __ADC__::begin(void)
{
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	ec 01       	movw	r28, r24
    this->setReference(AVCC);                 /* Set default reference */
 7e0:	61 e0       	ldi	r22, 0x01	; 1
 7e2:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <_ZN7__ADC__12setReferenceEh>
    this->setPrescaler(128);                  /* Set default frequency prescaler */
 7e6:	60 e8       	ldi	r22, 0x80	; 128
 7e8:	ce 01       	movw	r24, r28
 7ea:	0e 94 91 03 	call	0x722	; 0x722 <_ZN7__ADC__12setPrescalerEh>
    this->setSamples(ADC_DEFAULT_SAMPLES); /* Set default sample rate */
 7ee:	64 e6       	ldi	r22, 0x64	; 100
 7f0:	ce 01       	movw	r24, r28
 7f2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <_ZN7__ADC__10setSamplesEh>

    #if defined (__AVR_ATmega328P__) || \
        defined (__AVR_ATmega328PB__)
    ADCSRA |= (1 << ADEN); /* Enable ADC */
 7f6:	ea e7       	ldi	r30, 0x7A	; 122
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	80 81       	ld	r24, Z
 7fc:	80 68       	ori	r24, 0x80	; 128
 7fe:	80 83       	st	Z, r24
    #endif
}
 800:	df 91       	pop	r29
 802:	cf 91       	pop	r28
 804:	08 95       	ret

00000806 <_ZN7__ADC__4readEh>:
Purpose:  Read ADC channel
Input:    Channel
Return:   Value of the channel
*********************************************/
uint16_t __ADC__::read(uint8_t channel)
{
 806:	cf 92       	push	r12
 808:	df 92       	push	r13
 80a:	ef 92       	push	r14
 80c:	ff 92       	push	r15
 80e:	dc 01       	movw	r26, r24
    uint32_t result = 0;                  /* Variable to store result */

    #if defined (__AVR_ATmega328P__) || \
        defined (__AVR_ATmega328PB__)
    ADMUX = (ADMUX & 0xF0) | (channel & 0x07); /* Set channel */
 810:	ec e7       	ldi	r30, 0x7C	; 124
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	80 81       	ld	r24, Z
 816:	80 7f       	andi	r24, 0xF0	; 240
 818:	67 70       	andi	r22, 0x07	; 7
 81a:	68 2b       	or	r22, r24
 81c:	60 83       	st	Z, r22
    #endif

    for (uint8_t sample = 0; sample < this->samples; sample++)
 81e:	30 e0       	ldi	r19, 0x00	; 0
Input:    Channel
Return:   Value of the channel
*********************************************/
uint16_t __ADC__::read(uint8_t channel)
{
    uint32_t result = 0;                  /* Variable to store result */
 820:	c1 2c       	mov	r12, r1
 822:	d1 2c       	mov	r13, r1
 824:	76 01       	movw	r14, r12
    #if defined (__AVR_ATmega328P__) || \
        defined (__AVR_ATmega328PB__)
    ADMUX = (ADMUX & 0xF0) | (channel & 0x07); /* Set channel */
    #endif

    for (uint8_t sample = 0; sample < this->samples; sample++)
 826:	2c 91       	ld	r18, X
 828:	32 17       	cp	r19, r18
 82a:	98 f4       	brcc	.+38     	; 0x852 <_ZN7__ADC__4readEh+0x4c>
    {
        #if defined (__AVR_ATmega328P__) || \
            defined (__AVR_ATmega328PB__)
        ADCSRA |= (1 << ADSC);          /* Start conversion */
 82c:	ea e7       	ldi	r30, 0x7A	; 122
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	90 81       	ld	r25, Z
 832:	90 64       	ori	r25, 0x40	; 64
 834:	90 83       	st	Z, r25
        while(!(ADCSRA & (1 << ADIF))); /* Wait until conversion has ended */
 836:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 83a:	94 ff       	sbrs	r25, 4
 83c:	fc cf       	rjmp	.-8      	; 0x836 <_ZN7__ADC__4readEh+0x30>
        result += ADC;                 /* Sum samples */
 83e:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 842:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 846:	c4 0e       	add	r12, r20
 848:	d5 1e       	adc	r13, r21
 84a:	e1 1c       	adc	r14, r1
 84c:	f1 1c       	adc	r15, r1
    #if defined (__AVR_ATmega328P__) || \
        defined (__AVR_ATmega328PB__)
    ADMUX = (ADMUX & 0xF0) | (channel & 0x07); /* Set channel */
    #endif

    for (uint8_t sample = 0; sample < this->samples; sample++)
 84e:	3f 5f       	subi	r19, 0xFF	; 255
 850:	ea cf       	rjmp	.-44     	; 0x826 <_ZN7__ADC__4readEh+0x20>
        while(!(ADCSRA & (1 << ADIF))); /* Wait until conversion has ended */
        result += ADC;                 /* Sum samples */
        #endif
    }

    return (result / this->samples); /* Return result */
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	40 e0       	ldi	r20, 0x00	; 0
 856:	50 e0       	ldi	r21, 0x00	; 0
 858:	c7 01       	movw	r24, r14
 85a:	b6 01       	movw	r22, r12
 85c:	0e 94 bc 06 	call	0xd78	; 0xd78 <__udivmodsi4>
}
 860:	c9 01       	movw	r24, r18
 862:	ff 90       	pop	r15
 864:	ef 90       	pop	r14
 866:	df 90       	pop	r13
 868:	cf 90       	pop	r12
 86a:	08 95       	ret

0000086c <main>:
#include "ADC\ADC.h"
#include "USART\USART.h"

int main(void)
{
    Time.begin();
 86c:	82 e2       	ldi	r24, 0x22	; 34
 86e:	91 e0       	ldi	r25, 0x01	; 1
 870:	0e 94 86 00 	call	0x10c	; 0x10c <_ZN8__Time__5beginEv>
    ADC_MODULE.begin();
 874:	88 e3       	ldi	r24, 0x38	; 56
 876:	93 e0       	ldi	r25, 0x03	; 3
 878:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN7__ADC__5beginEv>
    USART.begin(115200);
 87c:	40 e0       	ldi	r20, 0x00	; 0
 87e:	52 ec       	ldi	r21, 0xC2	; 194
 880:	61 e0       	ldi	r22, 0x01	; 1
 882:	70 e0       	ldi	r23, 0x00	; 0
 884:	87 e2       	ldi	r24, 0x27	; 39
 886:	91 e0       	ldi	r25, 0x01	; 1
 888:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN9__USART__5beginEm>
    USART.print("ADC - Demo\n");
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	71 e0       	ldi	r23, 0x01	; 1
 890:	87 e2       	ldi	r24, 0x27	; 39
 892:	91 e0       	ldi	r25, 0x01	; 1
 894:	0e 94 be 01 	call	0x37c	; 0x37c <_ZN9__USART__5printEPKc>
    while (1)
    {
        const uint16_t adcValue = ADC_MODULE.read(0);
 898:	60 e0       	ldi	r22, 0x00	; 0
 89a:	88 e3       	ldi	r24, 0x38	; 56
 89c:	93 e0       	ldi	r25, 0x03	; 3
 89e:	0e 94 03 04 	call	0x806	; 0x806 <_ZN7__ADC__4readEh>
 8a2:	ec 01       	movw	r28, r24
        USART.print("ADC channel 0 value: ");
 8a4:	6c e0       	ldi	r22, 0x0C	; 12
 8a6:	71 e0       	ldi	r23, 0x01	; 1
 8a8:	87 e2       	ldi	r24, 0x27	; 39
 8aa:	91 e0       	ldi	r25, 0x01	; 1
 8ac:	0e 94 be 01 	call	0x37c	; 0x37c <_ZN9__USART__5printEPKc>
        USART.println(adcValue);
 8b0:	be 01       	movw	r22, r28
 8b2:	87 e2       	ldi	r24, 0x27	; 39
 8b4:	91 e0       	ldi	r25, 0x01	; 1
 8b6:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN9__USART__7printlnEj>
        Time.delay(1);
 8ba:	41 e0       	ldi	r20, 0x01	; 1
 8bc:	50 e0       	ldi	r21, 0x00	; 0
 8be:	60 e0       	ldi	r22, 0x00	; 0
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	82 e2       	ldi	r24, 0x22	; 34
 8c4:	91 e0       	ldi	r25, 0x01	; 1
 8c6:	0e 94 c5 00 	call	0x18a	; 0x18a <_ZN8__Time__5delayEm>
 8ca:	e6 cf       	rjmp	.-52     	; 0x898 <main+0x2c>

000008cc <__subsf3>:
 8cc:	50 58       	subi	r21, 0x80	; 128

000008ce <__addsf3>:
 8ce:	bb 27       	eor	r27, r27
 8d0:	aa 27       	eor	r26, r26
 8d2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__addsf3x>
 8d6:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__fp_round>
 8da:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fp_pscA>
 8de:	38 f0       	brcs	.+14     	; 0x8ee <__addsf3+0x20>
 8e0:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fp_pscB>
 8e4:	20 f0       	brcs	.+8      	; 0x8ee <__addsf3+0x20>
 8e6:	39 f4       	brne	.+14     	; 0x8f6 <__addsf3+0x28>
 8e8:	9f 3f       	cpi	r25, 0xFF	; 255
 8ea:	19 f4       	brne	.+6      	; 0x8f2 <__addsf3+0x24>
 8ec:	26 f4       	brtc	.+8      	; 0x8f6 <__addsf3+0x28>
 8ee:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_nan>
 8f2:	0e f4       	brtc	.+2      	; 0x8f6 <__addsf3+0x28>
 8f4:	e0 95       	com	r30
 8f6:	e7 fb       	bst	r30, 7
 8f8:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_inf>

000008fc <__addsf3x>:
 8fc:	e9 2f       	mov	r30, r25
 8fe:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__fp_split3>
 902:	58 f3       	brcs	.-42     	; 0x8da <__addsf3+0xc>
 904:	ba 17       	cp	r27, r26
 906:	62 07       	cpc	r22, r18
 908:	73 07       	cpc	r23, r19
 90a:	84 07       	cpc	r24, r20
 90c:	95 07       	cpc	r25, r21
 90e:	20 f0       	brcs	.+8      	; 0x918 <__stack+0x19>
 910:	79 f4       	brne	.+30     	; 0x930 <__stack+0x31>
 912:	a6 f5       	brtc	.+104    	; 0x97c <__stack+0x7d>
 914:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__fp_zero>
 918:	0e f4       	brtc	.+2      	; 0x91c <__stack+0x1d>
 91a:	e0 95       	com	r30
 91c:	0b 2e       	mov	r0, r27
 91e:	ba 2f       	mov	r27, r26
 920:	a0 2d       	mov	r26, r0
 922:	0b 01       	movw	r0, r22
 924:	b9 01       	movw	r22, r18
 926:	90 01       	movw	r18, r0
 928:	0c 01       	movw	r0, r24
 92a:	ca 01       	movw	r24, r20
 92c:	a0 01       	movw	r20, r0
 92e:	11 24       	eor	r1, r1
 930:	ff 27       	eor	r31, r31
 932:	59 1b       	sub	r21, r25
 934:	99 f0       	breq	.+38     	; 0x95c <__stack+0x5d>
 936:	59 3f       	cpi	r21, 0xF9	; 249
 938:	50 f4       	brcc	.+20     	; 0x94e <__stack+0x4f>
 93a:	50 3e       	cpi	r21, 0xE0	; 224
 93c:	68 f1       	brcs	.+90     	; 0x998 <__stack+0x99>
 93e:	1a 16       	cp	r1, r26
 940:	f0 40       	sbci	r31, 0x00	; 0
 942:	a2 2f       	mov	r26, r18
 944:	23 2f       	mov	r18, r19
 946:	34 2f       	mov	r19, r20
 948:	44 27       	eor	r20, r20
 94a:	58 5f       	subi	r21, 0xF8	; 248
 94c:	f3 cf       	rjmp	.-26     	; 0x934 <__stack+0x35>
 94e:	46 95       	lsr	r20
 950:	37 95       	ror	r19
 952:	27 95       	ror	r18
 954:	a7 95       	ror	r26
 956:	f0 40       	sbci	r31, 0x00	; 0
 958:	53 95       	inc	r21
 95a:	c9 f7       	brne	.-14     	; 0x94e <__stack+0x4f>
 95c:	7e f4       	brtc	.+30     	; 0x97c <__stack+0x7d>
 95e:	1f 16       	cp	r1, r31
 960:	ba 0b       	sbc	r27, r26
 962:	62 0b       	sbc	r22, r18
 964:	73 0b       	sbc	r23, r19
 966:	84 0b       	sbc	r24, r20
 968:	ba f0       	brmi	.+46     	; 0x998 <__stack+0x99>
 96a:	91 50       	subi	r25, 0x01	; 1
 96c:	a1 f0       	breq	.+40     	; 0x996 <__stack+0x97>
 96e:	ff 0f       	add	r31, r31
 970:	bb 1f       	adc	r27, r27
 972:	66 1f       	adc	r22, r22
 974:	77 1f       	adc	r23, r23
 976:	88 1f       	adc	r24, r24
 978:	c2 f7       	brpl	.-16     	; 0x96a <__stack+0x6b>
 97a:	0e c0       	rjmp	.+28     	; 0x998 <__stack+0x99>
 97c:	ba 0f       	add	r27, r26
 97e:	62 1f       	adc	r22, r18
 980:	73 1f       	adc	r23, r19
 982:	84 1f       	adc	r24, r20
 984:	48 f4       	brcc	.+18     	; 0x998 <__stack+0x99>
 986:	87 95       	ror	r24
 988:	77 95       	ror	r23
 98a:	67 95       	ror	r22
 98c:	b7 95       	ror	r27
 98e:	f7 95       	ror	r31
 990:	9e 3f       	cpi	r25, 0xFE	; 254
 992:	08 f0       	brcs	.+2      	; 0x996 <__stack+0x97>
 994:	b0 cf       	rjmp	.-160    	; 0x8f6 <__addsf3+0x28>
 996:	93 95       	inc	r25
 998:	88 0f       	add	r24, r24
 99a:	08 f0       	brcs	.+2      	; 0x99e <__stack+0x9f>
 99c:	99 27       	eor	r25, r25
 99e:	ee 0f       	add	r30, r30
 9a0:	97 95       	ror	r25
 9a2:	87 95       	ror	r24
 9a4:	08 95       	ret

000009a6 <__divsf3>:
 9a6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__divsf3x>
 9aa:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__fp_round>
 9ae:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fp_pscB>
 9b2:	58 f0       	brcs	.+22     	; 0x9ca <__divsf3+0x24>
 9b4:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fp_pscA>
 9b8:	40 f0       	brcs	.+16     	; 0x9ca <__divsf3+0x24>
 9ba:	29 f4       	brne	.+10     	; 0x9c6 <__divsf3+0x20>
 9bc:	5f 3f       	cpi	r21, 0xFF	; 255
 9be:	29 f0       	breq	.+10     	; 0x9ca <__divsf3+0x24>
 9c0:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_inf>
 9c4:	51 11       	cpse	r21, r1
 9c6:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__fp_szero>
 9ca:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_nan>

000009ce <__divsf3x>:
 9ce:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__fp_split3>
 9d2:	68 f3       	brcs	.-38     	; 0x9ae <__divsf3+0x8>

000009d4 <__divsf3_pse>:
 9d4:	99 23       	and	r25, r25
 9d6:	b1 f3       	breq	.-20     	; 0x9c4 <__divsf3+0x1e>
 9d8:	55 23       	and	r21, r21
 9da:	91 f3       	breq	.-28     	; 0x9c0 <__divsf3+0x1a>
 9dc:	95 1b       	sub	r25, r21
 9de:	55 0b       	sbc	r21, r21
 9e0:	bb 27       	eor	r27, r27
 9e2:	aa 27       	eor	r26, r26
 9e4:	62 17       	cp	r22, r18
 9e6:	73 07       	cpc	r23, r19
 9e8:	84 07       	cpc	r24, r20
 9ea:	38 f0       	brcs	.+14     	; 0x9fa <__divsf3_pse+0x26>
 9ec:	9f 5f       	subi	r25, 0xFF	; 255
 9ee:	5f 4f       	sbci	r21, 0xFF	; 255
 9f0:	22 0f       	add	r18, r18
 9f2:	33 1f       	adc	r19, r19
 9f4:	44 1f       	adc	r20, r20
 9f6:	aa 1f       	adc	r26, r26
 9f8:	a9 f3       	breq	.-22     	; 0x9e4 <__divsf3_pse+0x10>
 9fa:	35 d0       	rcall	.+106    	; 0xa66 <__divsf3_pse+0x92>
 9fc:	0e 2e       	mov	r0, r30
 9fe:	3a f0       	brmi	.+14     	; 0xa0e <__divsf3_pse+0x3a>
 a00:	e0 e8       	ldi	r30, 0x80	; 128
 a02:	32 d0       	rcall	.+100    	; 0xa68 <__divsf3_pse+0x94>
 a04:	91 50       	subi	r25, 0x01	; 1
 a06:	50 40       	sbci	r21, 0x00	; 0
 a08:	e6 95       	lsr	r30
 a0a:	00 1c       	adc	r0, r0
 a0c:	ca f7       	brpl	.-14     	; 0xa00 <__divsf3_pse+0x2c>
 a0e:	2b d0       	rcall	.+86     	; 0xa66 <__divsf3_pse+0x92>
 a10:	fe 2f       	mov	r31, r30
 a12:	29 d0       	rcall	.+82     	; 0xa66 <__divsf3_pse+0x92>
 a14:	66 0f       	add	r22, r22
 a16:	77 1f       	adc	r23, r23
 a18:	88 1f       	adc	r24, r24
 a1a:	bb 1f       	adc	r27, r27
 a1c:	26 17       	cp	r18, r22
 a1e:	37 07       	cpc	r19, r23
 a20:	48 07       	cpc	r20, r24
 a22:	ab 07       	cpc	r26, r27
 a24:	b0 e8       	ldi	r27, 0x80	; 128
 a26:	09 f0       	breq	.+2      	; 0xa2a <__divsf3_pse+0x56>
 a28:	bb 0b       	sbc	r27, r27
 a2a:	80 2d       	mov	r24, r0
 a2c:	bf 01       	movw	r22, r30
 a2e:	ff 27       	eor	r31, r31
 a30:	93 58       	subi	r25, 0x83	; 131
 a32:	5f 4f       	sbci	r21, 0xFF	; 255
 a34:	3a f0       	brmi	.+14     	; 0xa44 <__divsf3_pse+0x70>
 a36:	9e 3f       	cpi	r25, 0xFE	; 254
 a38:	51 05       	cpc	r21, r1
 a3a:	78 f0       	brcs	.+30     	; 0xa5a <__divsf3_pse+0x86>
 a3c:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_inf>
 a40:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__fp_szero>
 a44:	5f 3f       	cpi	r21, 0xFF	; 255
 a46:	e4 f3       	brlt	.-8      	; 0xa40 <__divsf3_pse+0x6c>
 a48:	98 3e       	cpi	r25, 0xE8	; 232
 a4a:	d4 f3       	brlt	.-12     	; 0xa40 <__divsf3_pse+0x6c>
 a4c:	86 95       	lsr	r24
 a4e:	77 95       	ror	r23
 a50:	67 95       	ror	r22
 a52:	b7 95       	ror	r27
 a54:	f7 95       	ror	r31
 a56:	9f 5f       	subi	r25, 0xFF	; 255
 a58:	c9 f7       	brne	.-14     	; 0xa4c <__divsf3_pse+0x78>
 a5a:	88 0f       	add	r24, r24
 a5c:	91 1d       	adc	r25, r1
 a5e:	96 95       	lsr	r25
 a60:	87 95       	ror	r24
 a62:	97 f9       	bld	r25, 7
 a64:	08 95       	ret
 a66:	e1 e0       	ldi	r30, 0x01	; 1
 a68:	66 0f       	add	r22, r22
 a6a:	77 1f       	adc	r23, r23
 a6c:	88 1f       	adc	r24, r24
 a6e:	bb 1f       	adc	r27, r27
 a70:	62 17       	cp	r22, r18
 a72:	73 07       	cpc	r23, r19
 a74:	84 07       	cpc	r24, r20
 a76:	ba 07       	cpc	r27, r26
 a78:	20 f0       	brcs	.+8      	; 0xa82 <__divsf3_pse+0xae>
 a7a:	62 1b       	sub	r22, r18
 a7c:	73 0b       	sbc	r23, r19
 a7e:	84 0b       	sbc	r24, r20
 a80:	ba 0b       	sbc	r27, r26
 a82:	ee 1f       	adc	r30, r30
 a84:	88 f7       	brcc	.-30     	; 0xa68 <__divsf3_pse+0x94>
 a86:	e0 95       	com	r30
 a88:	08 95       	ret

00000a8a <__fixunssfsi>:
 a8a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__fp_splitA>
 a8e:	88 f0       	brcs	.+34     	; 0xab2 <__fixunssfsi+0x28>
 a90:	9f 57       	subi	r25, 0x7F	; 127
 a92:	98 f0       	brcs	.+38     	; 0xaba <__fixunssfsi+0x30>
 a94:	b9 2f       	mov	r27, r25
 a96:	99 27       	eor	r25, r25
 a98:	b7 51       	subi	r27, 0x17	; 23
 a9a:	b0 f0       	brcs	.+44     	; 0xac8 <__fixunssfsi+0x3e>
 a9c:	e1 f0       	breq	.+56     	; 0xad6 <__fixunssfsi+0x4c>
 a9e:	66 0f       	add	r22, r22
 aa0:	77 1f       	adc	r23, r23
 aa2:	88 1f       	adc	r24, r24
 aa4:	99 1f       	adc	r25, r25
 aa6:	1a f0       	brmi	.+6      	; 0xaae <__fixunssfsi+0x24>
 aa8:	ba 95       	dec	r27
 aaa:	c9 f7       	brne	.-14     	; 0xa9e <__fixunssfsi+0x14>
 aac:	14 c0       	rjmp	.+40     	; 0xad6 <__fixunssfsi+0x4c>
 aae:	b1 30       	cpi	r27, 0x01	; 1
 ab0:	91 f0       	breq	.+36     	; 0xad6 <__fixunssfsi+0x4c>
 ab2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__fp_zero>
 ab6:	b1 e0       	ldi	r27, 0x01	; 1
 ab8:	08 95       	ret
 aba:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__fp_zero>
 abe:	67 2f       	mov	r22, r23
 ac0:	78 2f       	mov	r23, r24
 ac2:	88 27       	eor	r24, r24
 ac4:	b8 5f       	subi	r27, 0xF8	; 248
 ac6:	39 f0       	breq	.+14     	; 0xad6 <__fixunssfsi+0x4c>
 ac8:	b9 3f       	cpi	r27, 0xF9	; 249
 aca:	cc f3       	brlt	.-14     	; 0xabe <__fixunssfsi+0x34>
 acc:	86 95       	lsr	r24
 ace:	77 95       	ror	r23
 ad0:	67 95       	ror	r22
 ad2:	b3 95       	inc	r27
 ad4:	d9 f7       	brne	.-10     	; 0xacc <__fixunssfsi+0x42>
 ad6:	3e f4       	brtc	.+14     	; 0xae6 <__fixunssfsi+0x5c>
 ad8:	90 95       	com	r25
 ada:	80 95       	com	r24
 adc:	70 95       	com	r23
 ade:	61 95       	neg	r22
 ae0:	7f 4f       	sbci	r23, 0xFF	; 255
 ae2:	8f 4f       	sbci	r24, 0xFF	; 255
 ae4:	9f 4f       	sbci	r25, 0xFF	; 255
 ae6:	08 95       	ret

00000ae8 <__floatunsisf>:
 ae8:	e8 94       	clt
 aea:	09 c0       	rjmp	.+18     	; 0xafe <__floatsisf+0x12>

00000aec <__floatsisf>:
 aec:	97 fb       	bst	r25, 7
 aee:	3e f4       	brtc	.+14     	; 0xafe <__floatsisf+0x12>
 af0:	90 95       	com	r25
 af2:	80 95       	com	r24
 af4:	70 95       	com	r23
 af6:	61 95       	neg	r22
 af8:	7f 4f       	sbci	r23, 0xFF	; 255
 afa:	8f 4f       	sbci	r24, 0xFF	; 255
 afc:	9f 4f       	sbci	r25, 0xFF	; 255
 afe:	99 23       	and	r25, r25
 b00:	a9 f0       	breq	.+42     	; 0xb2c <__floatsisf+0x40>
 b02:	f9 2f       	mov	r31, r25
 b04:	96 e9       	ldi	r25, 0x96	; 150
 b06:	bb 27       	eor	r27, r27
 b08:	93 95       	inc	r25
 b0a:	f6 95       	lsr	r31
 b0c:	87 95       	ror	r24
 b0e:	77 95       	ror	r23
 b10:	67 95       	ror	r22
 b12:	b7 95       	ror	r27
 b14:	f1 11       	cpse	r31, r1
 b16:	f8 cf       	rjmp	.-16     	; 0xb08 <__floatsisf+0x1c>
 b18:	fa f4       	brpl	.+62     	; 0xb58 <__floatsisf+0x6c>
 b1a:	bb 0f       	add	r27, r27
 b1c:	11 f4       	brne	.+4      	; 0xb22 <__floatsisf+0x36>
 b1e:	60 ff       	sbrs	r22, 0
 b20:	1b c0       	rjmp	.+54     	; 0xb58 <__floatsisf+0x6c>
 b22:	6f 5f       	subi	r22, 0xFF	; 255
 b24:	7f 4f       	sbci	r23, 0xFF	; 255
 b26:	8f 4f       	sbci	r24, 0xFF	; 255
 b28:	9f 4f       	sbci	r25, 0xFF	; 255
 b2a:	16 c0       	rjmp	.+44     	; 0xb58 <__floatsisf+0x6c>
 b2c:	88 23       	and	r24, r24
 b2e:	11 f0       	breq	.+4      	; 0xb34 <__floatsisf+0x48>
 b30:	96 e9       	ldi	r25, 0x96	; 150
 b32:	11 c0       	rjmp	.+34     	; 0xb56 <__floatsisf+0x6a>
 b34:	77 23       	and	r23, r23
 b36:	21 f0       	breq	.+8      	; 0xb40 <__floatsisf+0x54>
 b38:	9e e8       	ldi	r25, 0x8E	; 142
 b3a:	87 2f       	mov	r24, r23
 b3c:	76 2f       	mov	r23, r22
 b3e:	05 c0       	rjmp	.+10     	; 0xb4a <__floatsisf+0x5e>
 b40:	66 23       	and	r22, r22
 b42:	71 f0       	breq	.+28     	; 0xb60 <__floatsisf+0x74>
 b44:	96 e8       	ldi	r25, 0x86	; 134
 b46:	86 2f       	mov	r24, r22
 b48:	70 e0       	ldi	r23, 0x00	; 0
 b4a:	60 e0       	ldi	r22, 0x00	; 0
 b4c:	2a f0       	brmi	.+10     	; 0xb58 <__floatsisf+0x6c>
 b4e:	9a 95       	dec	r25
 b50:	66 0f       	add	r22, r22
 b52:	77 1f       	adc	r23, r23
 b54:	88 1f       	adc	r24, r24
 b56:	da f7       	brpl	.-10     	; 0xb4e <__floatsisf+0x62>
 b58:	88 0f       	add	r24, r24
 b5a:	96 95       	lsr	r25
 b5c:	87 95       	ror	r24
 b5e:	97 f9       	bld	r25, 7
 b60:	08 95       	ret

00000b62 <__fp_inf>:
 b62:	97 f9       	bld	r25, 7
 b64:	9f 67       	ori	r25, 0x7F	; 127
 b66:	80 e8       	ldi	r24, 0x80	; 128
 b68:	70 e0       	ldi	r23, 0x00	; 0
 b6a:	60 e0       	ldi	r22, 0x00	; 0
 b6c:	08 95       	ret

00000b6e <__fp_nan>:
 b6e:	9f ef       	ldi	r25, 0xFF	; 255
 b70:	80 ec       	ldi	r24, 0xC0	; 192
 b72:	08 95       	ret

00000b74 <__fp_pscA>:
 b74:	00 24       	eor	r0, r0
 b76:	0a 94       	dec	r0
 b78:	16 16       	cp	r1, r22
 b7a:	17 06       	cpc	r1, r23
 b7c:	18 06       	cpc	r1, r24
 b7e:	09 06       	cpc	r0, r25
 b80:	08 95       	ret

00000b82 <__fp_pscB>:
 b82:	00 24       	eor	r0, r0
 b84:	0a 94       	dec	r0
 b86:	12 16       	cp	r1, r18
 b88:	13 06       	cpc	r1, r19
 b8a:	14 06       	cpc	r1, r20
 b8c:	05 06       	cpc	r0, r21
 b8e:	08 95       	ret

00000b90 <__fp_round>:
 b90:	09 2e       	mov	r0, r25
 b92:	03 94       	inc	r0
 b94:	00 0c       	add	r0, r0
 b96:	11 f4       	brne	.+4      	; 0xb9c <__fp_round+0xc>
 b98:	88 23       	and	r24, r24
 b9a:	52 f0       	brmi	.+20     	; 0xbb0 <__fp_round+0x20>
 b9c:	bb 0f       	add	r27, r27
 b9e:	40 f4       	brcc	.+16     	; 0xbb0 <__fp_round+0x20>
 ba0:	bf 2b       	or	r27, r31
 ba2:	11 f4       	brne	.+4      	; 0xba8 <__fp_round+0x18>
 ba4:	60 ff       	sbrs	r22, 0
 ba6:	04 c0       	rjmp	.+8      	; 0xbb0 <__fp_round+0x20>
 ba8:	6f 5f       	subi	r22, 0xFF	; 255
 baa:	7f 4f       	sbci	r23, 0xFF	; 255
 bac:	8f 4f       	sbci	r24, 0xFF	; 255
 bae:	9f 4f       	sbci	r25, 0xFF	; 255
 bb0:	08 95       	ret

00000bb2 <__fp_split3>:
 bb2:	57 fd       	sbrc	r21, 7
 bb4:	90 58       	subi	r25, 0x80	; 128
 bb6:	44 0f       	add	r20, r20
 bb8:	55 1f       	adc	r21, r21
 bba:	59 f0       	breq	.+22     	; 0xbd2 <__fp_splitA+0x10>
 bbc:	5f 3f       	cpi	r21, 0xFF	; 255
 bbe:	71 f0       	breq	.+28     	; 0xbdc <__fp_splitA+0x1a>
 bc0:	47 95       	ror	r20

00000bc2 <__fp_splitA>:
 bc2:	88 0f       	add	r24, r24
 bc4:	97 fb       	bst	r25, 7
 bc6:	99 1f       	adc	r25, r25
 bc8:	61 f0       	breq	.+24     	; 0xbe2 <__fp_splitA+0x20>
 bca:	9f 3f       	cpi	r25, 0xFF	; 255
 bcc:	79 f0       	breq	.+30     	; 0xbec <__fp_splitA+0x2a>
 bce:	87 95       	ror	r24
 bd0:	08 95       	ret
 bd2:	12 16       	cp	r1, r18
 bd4:	13 06       	cpc	r1, r19
 bd6:	14 06       	cpc	r1, r20
 bd8:	55 1f       	adc	r21, r21
 bda:	f2 cf       	rjmp	.-28     	; 0xbc0 <__fp_split3+0xe>
 bdc:	46 95       	lsr	r20
 bde:	f1 df       	rcall	.-30     	; 0xbc2 <__fp_splitA>
 be0:	08 c0       	rjmp	.+16     	; 0xbf2 <__fp_splitA+0x30>
 be2:	16 16       	cp	r1, r22
 be4:	17 06       	cpc	r1, r23
 be6:	18 06       	cpc	r1, r24
 be8:	99 1f       	adc	r25, r25
 bea:	f1 cf       	rjmp	.-30     	; 0xbce <__fp_splitA+0xc>
 bec:	86 95       	lsr	r24
 bee:	71 05       	cpc	r23, r1
 bf0:	61 05       	cpc	r22, r1
 bf2:	08 94       	sec
 bf4:	08 95       	ret

00000bf6 <__fp_zero>:
 bf6:	e8 94       	clt

00000bf8 <__fp_szero>:
 bf8:	bb 27       	eor	r27, r27
 bfa:	66 27       	eor	r22, r22
 bfc:	77 27       	eor	r23, r23
 bfe:	cb 01       	movw	r24, r22
 c00:	97 f9       	bld	r25, 7
 c02:	08 95       	ret

00000c04 <__mulsf3>:
 c04:	0e 94 15 06 	call	0xc2a	; 0xc2a <__mulsf3x>
 c08:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__fp_round>
 c0c:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fp_pscA>
 c10:	38 f0       	brcs	.+14     	; 0xc20 <__mulsf3+0x1c>
 c12:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fp_pscB>
 c16:	20 f0       	brcs	.+8      	; 0xc20 <__mulsf3+0x1c>
 c18:	95 23       	and	r25, r21
 c1a:	11 f0       	breq	.+4      	; 0xc20 <__mulsf3+0x1c>
 c1c:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_inf>
 c20:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_nan>
 c24:	11 24       	eor	r1, r1
 c26:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__fp_szero>

00000c2a <__mulsf3x>:
 c2a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__fp_split3>
 c2e:	70 f3       	brcs	.-36     	; 0xc0c <__mulsf3+0x8>

00000c30 <__mulsf3_pse>:
 c30:	95 9f       	mul	r25, r21
 c32:	c1 f3       	breq	.-16     	; 0xc24 <__mulsf3+0x20>
 c34:	95 0f       	add	r25, r21
 c36:	50 e0       	ldi	r21, 0x00	; 0
 c38:	55 1f       	adc	r21, r21
 c3a:	62 9f       	mul	r22, r18
 c3c:	f0 01       	movw	r30, r0
 c3e:	72 9f       	mul	r23, r18
 c40:	bb 27       	eor	r27, r27
 c42:	f0 0d       	add	r31, r0
 c44:	b1 1d       	adc	r27, r1
 c46:	63 9f       	mul	r22, r19
 c48:	aa 27       	eor	r26, r26
 c4a:	f0 0d       	add	r31, r0
 c4c:	b1 1d       	adc	r27, r1
 c4e:	aa 1f       	adc	r26, r26
 c50:	64 9f       	mul	r22, r20
 c52:	66 27       	eor	r22, r22
 c54:	b0 0d       	add	r27, r0
 c56:	a1 1d       	adc	r26, r1
 c58:	66 1f       	adc	r22, r22
 c5a:	82 9f       	mul	r24, r18
 c5c:	22 27       	eor	r18, r18
 c5e:	b0 0d       	add	r27, r0
 c60:	a1 1d       	adc	r26, r1
 c62:	62 1f       	adc	r22, r18
 c64:	73 9f       	mul	r23, r19
 c66:	b0 0d       	add	r27, r0
 c68:	a1 1d       	adc	r26, r1
 c6a:	62 1f       	adc	r22, r18
 c6c:	83 9f       	mul	r24, r19
 c6e:	a0 0d       	add	r26, r0
 c70:	61 1d       	adc	r22, r1
 c72:	22 1f       	adc	r18, r18
 c74:	74 9f       	mul	r23, r20
 c76:	33 27       	eor	r19, r19
 c78:	a0 0d       	add	r26, r0
 c7a:	61 1d       	adc	r22, r1
 c7c:	23 1f       	adc	r18, r19
 c7e:	84 9f       	mul	r24, r20
 c80:	60 0d       	add	r22, r0
 c82:	21 1d       	adc	r18, r1
 c84:	82 2f       	mov	r24, r18
 c86:	76 2f       	mov	r23, r22
 c88:	6a 2f       	mov	r22, r26
 c8a:	11 24       	eor	r1, r1
 c8c:	9f 57       	subi	r25, 0x7F	; 127
 c8e:	50 40       	sbci	r21, 0x00	; 0
 c90:	9a f0       	brmi	.+38     	; 0xcb8 <__mulsf3_pse+0x88>
 c92:	f1 f0       	breq	.+60     	; 0xcd0 <__mulsf3_pse+0xa0>
 c94:	88 23       	and	r24, r24
 c96:	4a f0       	brmi	.+18     	; 0xcaa <__mulsf3_pse+0x7a>
 c98:	ee 0f       	add	r30, r30
 c9a:	ff 1f       	adc	r31, r31
 c9c:	bb 1f       	adc	r27, r27
 c9e:	66 1f       	adc	r22, r22
 ca0:	77 1f       	adc	r23, r23
 ca2:	88 1f       	adc	r24, r24
 ca4:	91 50       	subi	r25, 0x01	; 1
 ca6:	50 40       	sbci	r21, 0x00	; 0
 ca8:	a9 f7       	brne	.-22     	; 0xc94 <__mulsf3_pse+0x64>
 caa:	9e 3f       	cpi	r25, 0xFE	; 254
 cac:	51 05       	cpc	r21, r1
 cae:	80 f0       	brcs	.+32     	; 0xcd0 <__mulsf3_pse+0xa0>
 cb0:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_inf>
 cb4:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__fp_szero>
 cb8:	5f 3f       	cpi	r21, 0xFF	; 255
 cba:	e4 f3       	brlt	.-8      	; 0xcb4 <__mulsf3_pse+0x84>
 cbc:	98 3e       	cpi	r25, 0xE8	; 232
 cbe:	d4 f3       	brlt	.-12     	; 0xcb4 <__mulsf3_pse+0x84>
 cc0:	86 95       	lsr	r24
 cc2:	77 95       	ror	r23
 cc4:	67 95       	ror	r22
 cc6:	b7 95       	ror	r27
 cc8:	f7 95       	ror	r31
 cca:	e7 95       	ror	r30
 ccc:	9f 5f       	subi	r25, 0xFF	; 255
 cce:	c1 f7       	brne	.-16     	; 0xcc0 <__mulsf3_pse+0x90>
 cd0:	fe 2b       	or	r31, r30
 cd2:	88 0f       	add	r24, r24
 cd4:	91 1d       	adc	r25, r1
 cd6:	96 95       	lsr	r25
 cd8:	87 95       	ror	r24
 cda:	97 f9       	bld	r25, 7
 cdc:	08 95       	ret

00000cde <round>:
 cde:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__fp_splitA>
 ce2:	e8 f0       	brcs	.+58     	; 0xd1e <round+0x40>
 ce4:	9e 37       	cpi	r25, 0x7E	; 126
 ce6:	e8 f0       	brcs	.+58     	; 0xd22 <round+0x44>
 ce8:	96 39       	cpi	r25, 0x96	; 150
 cea:	b8 f4       	brcc	.+46     	; 0xd1a <round+0x3c>
 cec:	9e 38       	cpi	r25, 0x8E	; 142
 cee:	48 f4       	brcc	.+18     	; 0xd02 <round+0x24>
 cf0:	67 2f       	mov	r22, r23
 cf2:	78 2f       	mov	r23, r24
 cf4:	88 27       	eor	r24, r24
 cf6:	98 5f       	subi	r25, 0xF8	; 248
 cf8:	f9 cf       	rjmp	.-14     	; 0xcec <round+0xe>
 cfa:	86 95       	lsr	r24
 cfc:	77 95       	ror	r23
 cfe:	67 95       	ror	r22
 d00:	93 95       	inc	r25
 d02:	95 39       	cpi	r25, 0x95	; 149
 d04:	d0 f3       	brcs	.-12     	; 0xcfa <round+0x1c>
 d06:	b6 2f       	mov	r27, r22
 d08:	b1 70       	andi	r27, 0x01	; 1
 d0a:	6b 0f       	add	r22, r27
 d0c:	71 1d       	adc	r23, r1
 d0e:	81 1d       	adc	r24, r1
 d10:	20 f4       	brcc	.+8      	; 0xd1a <round+0x3c>
 d12:	87 95       	ror	r24
 d14:	77 95       	ror	r23
 d16:	67 95       	ror	r22
 d18:	93 95       	inc	r25
 d1a:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_mintl>
 d1e:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_mpack>
 d22:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__fp_szero>

00000d26 <__fp_mintl>:
 d26:	88 23       	and	r24, r24
 d28:	71 f4       	brne	.+28     	; 0xd46 <__fp_mintl+0x20>
 d2a:	77 23       	and	r23, r23
 d2c:	21 f0       	breq	.+8      	; 0xd36 <__fp_mintl+0x10>
 d2e:	98 50       	subi	r25, 0x08	; 8
 d30:	87 2b       	or	r24, r23
 d32:	76 2f       	mov	r23, r22
 d34:	07 c0       	rjmp	.+14     	; 0xd44 <__fp_mintl+0x1e>
 d36:	66 23       	and	r22, r22
 d38:	11 f4       	brne	.+4      	; 0xd3e <__fp_mintl+0x18>
 d3a:	99 27       	eor	r25, r25
 d3c:	0d c0       	rjmp	.+26     	; 0xd58 <__fp_mintl+0x32>
 d3e:	90 51       	subi	r25, 0x10	; 16
 d40:	86 2b       	or	r24, r22
 d42:	70 e0       	ldi	r23, 0x00	; 0
 d44:	60 e0       	ldi	r22, 0x00	; 0
 d46:	2a f0       	brmi	.+10     	; 0xd52 <__fp_mintl+0x2c>
 d48:	9a 95       	dec	r25
 d4a:	66 0f       	add	r22, r22
 d4c:	77 1f       	adc	r23, r23
 d4e:	88 1f       	adc	r24, r24
 d50:	da f7       	brpl	.-10     	; 0xd48 <__fp_mintl+0x22>
 d52:	88 0f       	add	r24, r24
 d54:	96 95       	lsr	r25
 d56:	87 95       	ror	r24
 d58:	97 f9       	bld	r25, 7
 d5a:	08 95       	ret

00000d5c <__fp_mpack>:
 d5c:	9f 3f       	cpi	r25, 0xFF	; 255
 d5e:	31 f0       	breq	.+12     	; 0xd6c <__fp_mpack_finite+0xc>

00000d60 <__fp_mpack_finite>:
 d60:	91 50       	subi	r25, 0x01	; 1
 d62:	20 f4       	brcc	.+8      	; 0xd6c <__fp_mpack_finite+0xc>
 d64:	87 95       	ror	r24
 d66:	77 95       	ror	r23
 d68:	67 95       	ror	r22
 d6a:	b7 95       	ror	r27
 d6c:	88 0f       	add	r24, r24
 d6e:	91 1d       	adc	r25, r1
 d70:	96 95       	lsr	r25
 d72:	87 95       	ror	r24
 d74:	97 f9       	bld	r25, 7
 d76:	08 95       	ret

00000d78 <__udivmodsi4>:
 d78:	a1 e2       	ldi	r26, 0x21	; 33
 d7a:	1a 2e       	mov	r1, r26
 d7c:	aa 1b       	sub	r26, r26
 d7e:	bb 1b       	sub	r27, r27
 d80:	fd 01       	movw	r30, r26
 d82:	0d c0       	rjmp	.+26     	; 0xd9e <__udivmodsi4_ep>

00000d84 <__udivmodsi4_loop>:
 d84:	aa 1f       	adc	r26, r26
 d86:	bb 1f       	adc	r27, r27
 d88:	ee 1f       	adc	r30, r30
 d8a:	ff 1f       	adc	r31, r31
 d8c:	a2 17       	cp	r26, r18
 d8e:	b3 07       	cpc	r27, r19
 d90:	e4 07       	cpc	r30, r20
 d92:	f5 07       	cpc	r31, r21
 d94:	20 f0       	brcs	.+8      	; 0xd9e <__udivmodsi4_ep>
 d96:	a2 1b       	sub	r26, r18
 d98:	b3 0b       	sbc	r27, r19
 d9a:	e4 0b       	sbc	r30, r20
 d9c:	f5 0b       	sbc	r31, r21

00000d9e <__udivmodsi4_ep>:
 d9e:	66 1f       	adc	r22, r22
 da0:	77 1f       	adc	r23, r23
 da2:	88 1f       	adc	r24, r24
 da4:	99 1f       	adc	r25, r25
 da6:	1a 94       	dec	r1
 da8:	69 f7       	brne	.-38     	; 0xd84 <__udivmodsi4_loop>
 daa:	60 95       	com	r22
 dac:	70 95       	com	r23
 dae:	80 95       	com	r24
 db0:	90 95       	com	r25
 db2:	9b 01       	movw	r18, r22
 db4:	ac 01       	movw	r20, r24
 db6:	bd 01       	movw	r22, r26
 db8:	cf 01       	movw	r24, r30
 dba:	08 95       	ret

00000dbc <__umulhisi3>:
 dbc:	a2 9f       	mul	r26, r18
 dbe:	b0 01       	movw	r22, r0
 dc0:	b3 9f       	mul	r27, r19
 dc2:	c0 01       	movw	r24, r0
 dc4:	a3 9f       	mul	r26, r19
 dc6:	70 0d       	add	r23, r0
 dc8:	81 1d       	adc	r24, r1
 dca:	11 24       	eor	r1, r1
 dcc:	91 1d       	adc	r25, r1
 dce:	b2 9f       	mul	r27, r18
 dd0:	70 0d       	add	r23, r0
 dd2:	81 1d       	adc	r24, r1
 dd4:	11 24       	eor	r1, r1
 dd6:	91 1d       	adc	r25, r1
 dd8:	08 95       	ret

00000dda <__tablejump2__>:
 dda:	ee 0f       	add	r30, r30
 ddc:	ff 1f       	adc	r31, r31
 dde:	05 90       	lpm	r0, Z+
 de0:	f4 91       	lpm	r31, Z
 de2:	e0 2d       	mov	r30, r0
 de4:	09 94       	ijmp

00000de6 <__do_global_dtors>:
 de6:	10 e0       	ldi	r17, 0x00	; 0
 de8:	cb e5       	ldi	r28, 0x5B	; 91
 dea:	d0 e0       	ldi	r29, 0x00	; 0
 dec:	04 c0       	rjmp	.+8      	; 0xdf6 <__do_global_dtors+0x10>
 dee:	fe 01       	movw	r30, r28
 df0:	0e 94 ed 06 	call	0xdda	; 0xdda <__tablejump2__>
 df4:	21 96       	adiw	r28, 0x01	; 1
 df6:	cc 35       	cpi	r28, 0x5C	; 92
 df8:	d1 07       	cpc	r29, r17
 dfa:	c9 f7       	brne	.-14     	; 0xdee <__do_global_dtors+0x8>
 dfc:	f8 94       	cli

00000dfe <__stop_program>:
 dfe:	ff cf       	rjmp	.-2      	; 0xdfe <__stop_program>
